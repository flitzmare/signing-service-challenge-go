// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/device.go

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	reflect "reflect"
	sync "sync"

	domain "github.com/fiskaly/coding-challenges/signing-service-challenge/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIDeviceRepository is a mock of IDeviceRepository interface.
type MockIDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDeviceRepositoryMockRecorder
}

// MockIDeviceRepositoryMockRecorder is the mock recorder for MockIDeviceRepository.
type MockIDeviceRepositoryMockRecorder struct {
	mock *MockIDeviceRepository
}

// NewMockIDeviceRepository creates a new mock instance.
func NewMockIDeviceRepository(ctrl *gomock.Controller) *MockIDeviceRepository {
	mock := &MockIDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockIDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeviceRepository) EXPECT() *MockIDeviceRepositoryMockRecorder {
	return m.recorder
}

// CountDevices mocks base method.
func (m *MockIDeviceRepository) CountDevices() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDevices")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountDevices indicates an expected call of CountDevices.
func (mr *MockIDeviceRepositoryMockRecorder) CountDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDevices", reflect.TypeOf((*MockIDeviceRepository)(nil).CountDevices))
}

// CreateDevice mocks base method.
func (m *MockIDeviceRepository) CreateDevice(device *domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockIDeviceRepositoryMockRecorder) CreateDevice(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockIDeviceRepository)(nil).CreateDevice), device)
}

// GetDevice mocks base method.
func (m *MockIDeviceRepository) GetDevice(id string) (*domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", id)
	ret0, _ := ret[0].(*domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockIDeviceRepositoryMockRecorder) GetDevice(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockIDeviceRepository)(nil).GetDevice), id)
}

// GetDeviceMutex mocks base method.
func (m *MockIDeviceRepository) GetDeviceMutex(deviceID string) *sync.Mutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMutex", deviceID)
	ret0, _ := ret[0].(*sync.Mutex)
	return ret0
}

// GetDeviceMutex indicates an expected call of GetDeviceMutex.
func (mr *MockIDeviceRepositoryMockRecorder) GetDeviceMutex(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMutex", reflect.TypeOf((*MockIDeviceRepository)(nil).GetDeviceMutex), deviceID)
}

// IncrementSignatureCounter mocks base method.
func (m *MockIDeviceRepository) IncrementSignatureCounter(deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementSignatureCounter", deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementSignatureCounter indicates an expected call of IncrementSignatureCounter.
func (mr *MockIDeviceRepositoryMockRecorder) IncrementSignatureCounter(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSignatureCounter", reflect.TypeOf((*MockIDeviceRepository)(nil).IncrementSignatureCounter), deviceID)
}
