// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/signature.go

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	reflect "reflect"

	domain "github.com/fiskaly/coding-challenges/signing-service-challenge/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockISignatureRepository is a mock of ISignatureRepository interface.
type MockISignatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISignatureRepositoryMockRecorder
}

// MockISignatureRepositoryMockRecorder is the mock recorder for MockISignatureRepository.
type MockISignatureRepositoryMockRecorder struct {
	mock *MockISignatureRepository
}

// NewMockISignatureRepository creates a new mock instance.
func NewMockISignatureRepository(ctrl *gomock.Controller) *MockISignatureRepository {
	mock := &MockISignatureRepository{ctrl: ctrl}
	mock.recorder = &MockISignatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignatureRepository) EXPECT() *MockISignatureRepositoryMockRecorder {
	return m.recorder
}

// CreateSignature mocks base method.
func (m *MockISignatureRepository) CreateSignature(signature *domain.Signature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignature", signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignature indicates an expected call of CreateSignature.
func (mr *MockISignatureRepositoryMockRecorder) CreateSignature(signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignature", reflect.TypeOf((*MockISignatureRepository)(nil).CreateSignature), signature)
}

// GetAllSignatures mocks base method.
func (m *MockISignatureRepository) GetAllSignatures() ([]*domain.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSignatures")
	ret0, _ := ret[0].([]*domain.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSignatures indicates an expected call of GetAllSignatures.
func (mr *MockISignatureRepositoryMockRecorder) GetAllSignatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSignatures", reflect.TypeOf((*MockISignatureRepository)(nil).GetAllSignatures))
}

// GetAllSignaturesByDeviceID mocks base method.
func (m *MockISignatureRepository) GetAllSignaturesByDeviceID(deviceID string) ([]*domain.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSignaturesByDeviceID", deviceID)
	ret0, _ := ret[0].([]*domain.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSignaturesByDeviceID indicates an expected call of GetAllSignaturesByDeviceID.
func (mr *MockISignatureRepositoryMockRecorder) GetAllSignaturesByDeviceID(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSignaturesByDeviceID", reflect.TypeOf((*MockISignatureRepository)(nil).GetAllSignaturesByDeviceID), deviceID)
}

// GetLatestSignature mocks base method.
func (m *MockISignatureRepository) GetLatestSignature(deviceID string) (*domain.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSignature", deviceID)
	ret0, _ := ret[0].(*domain.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSignature indicates an expected call of GetLatestSignature.
func (mr *MockISignatureRepositoryMockRecorder) GetLatestSignature(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSignature", reflect.TypeOf((*MockISignatureRepository)(nil).GetLatestSignature), deviceID)
}
